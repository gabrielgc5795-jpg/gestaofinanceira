/**
 * @fileoverview Fun√ß√µes compartilhadas entre todas as p√°ginas do sistema
 * @author Gest√£o Financeira
 * @version 1.0.0
 */

// ===== FUN√á√ïES COMPARTILHADAS =====

/**
 * Navega para uma p√°gina espec√≠fica do sistema
 * @param {string} pagina - Nome da p√°gina (sem extens√£o .html)
 * @example
 * navegarPara('dashboard'); // Navega para dashboard.html
 */
function navegarPara(pagina) {
  window.location.href = `${pagina}.html`;
}

/**
 * Alterna entre tema claro e escuro
 * Salva a prefer√™ncia no localStorage e atualiza o √≠cone do bot√£o
 * @example
 * toggleTheme(); // Alterna o tema atual
 */
function toggleTheme() {
  const currentTheme = document.documentElement.getAttribute('data-theme');
  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
  
  document.documentElement.setAttribute('data-theme', newTheme);
  localStorage.setItem('theme', newTheme);
  
  // Atualizar √≠cone do bot√£o
  const themeBtn = document.querySelector('.theme-btn i');
  if (themeBtn) {
    themeBtn.className = newTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
  }
}

/**
 * Carrega o tema salvo no localStorage
 * Aplica o tema e atualiza o √≠cone correspondente
 * @example
 * loadTheme(); // Carrega tema salvo ou usa 'light' como padr√£o
 */
function loadTheme() {
  const savedTheme = localStorage.getItem('theme') || 'light';
  document.documentElement.setAttribute('data-theme', savedTheme);
  
  const themeBtn = document.querySelector('.theme-btn i');
  if (themeBtn) {
    themeBtn.className = savedTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
  }
}

/**
 * Converte chave de categoria em nome leg√≠vel com emoji
 * @param {string} key - Chave da categoria (ex: 'alimentacao')
 * @returns {string} Nome formatado da categoria com emoji
 * @example
 * getCategoriaNome('alimentacao'); // Retorna "üçΩÔ∏è Alimenta√ß√£o"
 */
function getCategoriaNome(key) {
  const nomes = {
    alimentacao: "üçΩÔ∏è Alimenta√ß√£o",
    transporte: "üöó Transporte", 
    lazer: "üéÆ Lazer",
    saude: "üè• Sa√∫de",
    educacao: "üìö Educa√ß√£o",
    vestuario: "üëï Vestu√°rio",
    casa: "üè† Casa",
    investimentos: "üìà Investimentos",
    salario: "üí∞ Sal√°rio",
    freelance: "üíº Freelance",
    outros: "üì¶ Outros"
  };
  return nomes[key] || key;
}

/**
 * Atualiza as estat√≠sticas exibidas no header da p√°gina
 * Calcula saldo total e n√∫mero de transa√ß√µes e atualiza os elementos do DOM
 * @example
 * atualizarHeader(); // Atualiza saldo e contador de transa√ß√µes no header
 */
function atualizarHeader() {
  let saldo = 0;
  let receitas = 0;
  let despesas = 0;

  transacoes.forEach(t => {
    if (t.tipo === "receita") {
      saldo += t.valor;
      receitas += t.valor;
    } else {
      saldo -= t.valor;
      despesas += t.valor;
    }
  });

  // Atualizar header se os elementos existirem
  const headerSaldo = document.getElementById("header-saldo");
  const headerTransacoes = document.getElementById("header-transacoes");
  
  if (headerSaldo) headerSaldo.textContent = `R$ ${saldo.toFixed(2)}`;
  if (headerTransacoes) headerTransacoes.textContent = transacoes.length;
}

/**
 * Calcula estat√≠sticas financeiras gerais do sistema
 * @returns {Object} Objeto com saldo, receitas, despesas e total de transa√ß√µes
 * @example
 * const stats = calcularEstatisticas();
 * console.log(stats.saldo); // Saldo atual
 * console.log(stats.receitas); // Total de receitas
 */
function calcularEstatisticas() {
  let saldo = 0;
  let receitas = 0;
  let despesas = 0;

  transacoes.forEach(t => {
    if (t.tipo === "receita") {
      saldo += t.valor;
      receitas += t.valor;
    } else {
      saldo -= t.valor;
      despesas += t.valor;
    }
  });

  return {
    saldo,
    receitas,
    despesas,
    totalTransacoes: transacoes.length
  };
}

/**
 * Adiciona uma nova transa√ß√£o ao sistema
 * @param {string} descricao - Descri√ß√£o da transa√ß√£o
 * @param {number} valor - Valor da transa√ß√£o
 * @param {string} tipo - Tipo da transa√ß√£o ('receita' ou 'despesa')
 * @param {string} categoria - Categoria da transa√ß√£o
 * @example
 * adicionarTransacao('Sal√°rio', 3000, 'receita', 'salario');
 * adicionarTransacao('Almo√ßo', 25.50, 'despesa', 'alimentacao');
 */
function adicionarTransacao(descricao, valor, tipo, categoria) {
  transacoes.push({
    descricao,
    valor: parseFloat(valor),
    tipo,
    categoria,
    data: new Date().toISOString()
  });

  salvarTransacoes();
  atualizarHeader();
}

/**
 * Marca o bot√£o de navega√ß√£o ativo baseado na p√°gina atual
 * @param {string} paginaAtiva - Nome da p√°gina ativa
 * @example
 * renderizarNavegacaoAtiva('Dashboard'); // Marca bot√£o do dashboard como ativo
 */
function renderizarNavegacaoAtiva(paginaAtiva) {
  const navButtons = document.querySelectorAll('.tab-button');
  navButtons.forEach(button => {
    button.classList.remove('active');
    if (button.textContent.trim().toLowerCase() === paginaAtiva.toLowerCase()) {
      button.classList.add('active');
    }
  });
}

/**
 * Inicializa√ß√£o comum executada em todas as p√°ginas
 * Carrega tema salvo e atualiza estat√≠sticas do header
 */
document.addEventListener('DOMContentLoaded', function() {
  loadTheme();
  atualizarHeader();
});
